fun main(args: Array<String>) {
    val str1 = // raw from terminal, to invert by byte
        """



""".trimIndent()

    val str2 = // expected
"""

""".trimIndent()

    val str3 = // actual
"""

""".trimIndent()

    // remove non-digits
    val str4 = """
261,097,220,353,288,126,672,938,177,679,156,095,644,991,062,261,845,945,096,058,370,820,988,476,992,889,364,212,206,702,983,749,389,585,222,526,678,609,815,709,496,893,359,546,448,401,815,809,021,962,841,319,486,489,244,135,927,499,585,090,397,533,595,929,578,607,017,502,963,986,556,594,079,709,849,428,186,418,083,671,086,146,654,374,201,977,176,450,926,017,821,012,185,029,652,278,616,994,445,899,507,251,671,734,744,220,446,946,486,726,407,547,565,235,149,894,863,358,205,867,325,756,674,110,764,756,253,993,099,966,928,553,885,423,458,889,971,322,871,579,559,478,608,624,183,521,952,968,159,874,118,775,047,260,337,252,104,265,418,773,417,083,462,637,758,243,022,067,387,692,495,904,092,352,983,253,803,449,206,459,297,022,958,414,187,805,329,623,211,592,031,387,556,499,575,103,086,196,215,648,918,623,048,654,255,919,309,472,240,091,699,132,243,968,333,232,203,565,264,464,879,709,066,546,161,908,991,977,013,660,003,379,087,211,903,431,048,430,317,507,285,765,867,885,845,501,578,069,199,411,966,853,479,624,321,335,239,525,437,343,702,646,892,620,695,540,830,493,977,159,509,759,626,964,658,928,646,458,312,098,229,165,783,881,642,771,677,831,382,654,772,877,919,457,600,023,018,397,163,014,536,550,209,076,605,103,846,155,171,380,720,514,269,554,308,000,658,801,871,373,449,786,531,486,942,916,871,193,363,368,841,107,735,195,890,279,353,873,999,737,695,818,638,663,899,818,000,933,789,350,739,753,815,738,532,895,710,987,940,973,652,953,679,539,790,021,929,070,616,810,164,946,133,303,908,550,088,766,399,698,414,757,428,522,837,534,800,436,977,360,096,124,701,987,444,553,296,084,876,955,903,406,874,367,395,323,474,041,192,316,929
""".trimIndent()

    val str5 = """
        5
    """.trimIndent()

//    reverseByByte(digitFilter(str1))
//    compare(digitFilter(str2), digitFilter(str3))
//    println(digitFilter(str4))
//    println(byteSpace(digitFilter(str4)))
//    println(zeroPad(str5, 64)) // 64 chars for 256-bit but hex



}

fun digitFilter(str: String): String {
    return str.filter { it.isDigit() }
}

fun zeroPad(str: String, n: Int): String {
    return str.padStart(n, '0')
}

fun compare(str1: String, str2: String) {
    if (str1 == str2)
        println("strings match")
    else
        println("strings do not match")
}

fun reverseByByte(str: String) {
    var result = StringBuilder()
    var byte = StringBuilder()
    for (i in str.indices.reversed()) {
//        print("$i ")
        if ((i + 1) % 8 == 0) {
            result.append(byte.toString().reversed()).append(" ")
            byte.clear()
        }
        byte.append(str[i])
    }
    result.append(byte.toString().reversed())
    println(result.toString())
}

fun byteSpace(str: String): String {
    var result = StringBuilder();
    var j = 0
    for (i in str.indices) {
        if (i > 0 && i % 8 == 0) {
            result.append(" ")
            j++
            if (j % 8 == 0) {
                result.append("\n")
            }
        }
        result.append(str[i])
    }
    return result.toString()
}

fun createBitString() {
    val sb = StringBuilder()
    sb.append(" ")
    for (i in 510 downTo 0) {
        when (i) {
            510 -> {
                sb.append("0")
            }
            in 509 downTo 255 -> sb.append("1")
            else -> sb.append("0")
        }
    }
    println(byteSpace(sb.toString()))
}